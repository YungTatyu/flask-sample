openapi: 3.0.3
info:
  title: Intern shift management app
  description: |-
    The intern shift management app is an app to streamline shift management for intern students.
    The main functions include registering, updating, and deleting shifts, as well as adding interns and managing attendance.
    You can easily change and confirm shifts, supporting internship operations.
  version: 1.0.0
servers:
  - url: https://irvinesystems.internshift.com

paths:
  /api/users:
    get:
      summary: "Search users by query parameters (pagination supported)"
      description: "Get user information with specified parameters and paginate with offset and limit"
      tags:
        - Users resource
      parameters:
        - name: offset
          in: query
          description: "Acquisition start position (default: 0)"
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: "Number of results retrieved (default: 10)"
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
      responses:
        "200":
          description: "Successfully retrieved user information"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: "Total number of users"
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        email:
                          type: string
                          format: email
                        is_active:
                          type: boolean
                        created_by:
                          type: integer
        "400":
          description: "invalid query parameter."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid query parameter."
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
    post:
      summary: "Create new user"
      description: "New user registration. admin hits this api"
      tags:
        - Users resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        "201":
          description: "user creation success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "12345"
                  name:
                    type: string
                    example: "john"
                  email:
                    type: string
                    format: email
                  is_active:
                    type: boolean
        "400":
          description: "Input data is invalid"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Details of the error that occurred"
                    example: "Username is invalid."
        "401":
          $ref: '#/components/responses/AdminOnlyResponse'
        "404":
          description: "Hide endpoint for requests from unexpected clients"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Page not found."
        "409":
          description: "Conflict - user already exists"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Conflict error details"
                    example: "A user with this email already exists."

  /api/users/{userId}:
    get:
      summary: "Get user with specified user ID"
      description: "Gets a user based on the specified user ID"
      tags:
        - Users resource
      parameters:
        - name: userId
          in: path
          description: "User's unique ID"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully acquired user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                    format: email
                  is_active:
                    type: boolean
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."
    put:
      summary: "update (everything) with the specified user ID"
      tags:
        - Users resource
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: "name, email, password, is_active of the user you want to update"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                is_active:
                  type: boolean
              required:
                - name
                - email
                - password
                - is_active
      responses:
        "200":
          description: "User updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                    format: email
                  is_active:
                    type: boolean
        "400":
          description: "Input data is invalid"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Details of the error that occurred"
                    example: "Username is invalid."
        "401":
          $ref: '#/components/responses/UnauthorizedOrAdminResponse'

    patch:
      summary: "update with specified user ID (some element)"
      description: |
        Updates the specified user information.  
        Only the properties included in the request body will be updated; unspecified properties will not be changed.
      tags:
        - Users resource
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: |
          **Updatable items:**
          - `name`
          - `email`
          - `password`
          - `is_active`
          **Partial updates are possible. Only the items you include in the request body will be updated; other values ​​will remain unchanged. **
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                is_active:
                  type: boolean
                created_by:
                  type: integer
              additionalProperties: false
      responses:
        "200":
          description: "User updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                    format: email
                  is_active:
                    type: boolean
        "400":
          description: "Input data is invalid"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Details of the error that occurred"
                    example: "Username is invalid."
        "401":
          $ref: '#/components/responses/UnauthorizedOrAdminResponse'
    delete:
      summary: "Delete user with specified user ID"
      description: "Deletes a user based on the specified user ID"
      tags:
        - Users resource
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "User deleted successfully"
          content: {}
        "401":
          $ref: '#/components/responses/AdminOnlyResponse'

  /api/users/infos:
    post:
      summary: "Create new user info"
      description: "New user info registration. admin hits this api"
      tags:
        - Users resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfo'
      responses:
        "200":
          description: "user info creation success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name_ja:
                    type: string
                  phone_number1:
                    type: string
                  phone_number2:
                    type: string
                  nfc_id:
                    type: integer
                  level:
                    type: number
                  interview_date:
                    type: string
                    format: date
                  contract_date:
                    type: string
                    format: date
                  expire_date:
                    type: string
                    format: date
                  birthday_date:
                    type: string
                    format: date

  /api/users/infos/{userId}:
    get:
      summary: "Get user infos with specified user ID"
      description: "Gets a user based on the specified user ID"
      tags:
        - Users resource
      parameters:
        - name: userId
          in: path
          description: "User's unique ID"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully acquired user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  # TODO: user tableの情報もいる？
                  # 画面設計次第
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                    format: email
                  is_active:
                    type: boolean
                  name_ja:
                    type: string
                  phone_number1:
                    type: string
                  phone_number2:
                    type: string
                  nfc_id:
                    type: integer
                  level:
                    type: number
                  interview_date:
                    type: string
                    format: date
                  contract_date:
                    type: string
                    format: date
                  expire_date:
                    type: string
                    format: date
                  birthday_date:
                    type: string
                    format: date
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."

    patch:
      summary: "update with specified user ID (some element)"
      description: |
        Updates the specified user information.  
        Only the properties included in the request body will be updated; unspecified properties will not be changed.
      tags:
        - Users resource
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: |
          **Updatable items:**
          - name_ja
          - phone_number1
          - phone_number2
          - nfc_id
          - level
          - interview_date
          - contract_date
          - expire_date
          - birthday_date
          **Partial updates are possible. Only the items you include in the request body will be updated; other values will remain unchanged. **
        content:
          application/json:
            #TODO user tableとuser info更新のapi分けるべき？
            schema:
              type: object
              properties:
                name_ja:
                  type: string
                phone_number1:
                  type: string
                phone_number2:
                  type: string
                nfc_id:
                  type: integer
                level:
                  type: number
                interview_date:
                  type: string
                  format: date
                contract_date:
                  type: string
                  format: date
                expire_date:
                  type: string
                  format: date
                birthday_date:
                  type: string
                  format: date
              additionalProperties: false
      responses:
        "200":
          description: "User updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name_ja:
                    type: string
                  phone_number1:
                    type: string
                  phone_number2:
                    type: string
                  nfc_id:
                    type: integer
                  level:
                    type: number
                  interview_date:
                    type: string
                    format: date
                  contract_date:
                    type: string
                    format: date
                  expire_date:
                    type: string
                    format: date
                  birthday_date:
                    type: string
                    format: date
        "400":
          description: "Input data is invalid"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Details of the error that occurred"
                    example: "Username is invalid."
        "401":
          $ref: '#/components/responses/UnauthorizedOrAdminResponse'

    delete:
      summary: "Delete user info with specified user ID"
      description: "Deletes a user based on the specified user ID"
      tags:
        - Users resource
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "User info deleted successfully"
          content: {}
        "401":
          $ref: '#/components/responses/AdminOnlyResponse'

  /api/scheduled-shifts:
    get:
      summary: "Search for scheduled shifts using query parameters (pagination supported)"
      description: "Get scheduled shifts with specified parameters and paginate with start_date and end_date"
      tags:
        - Scheduled shifts resource
      parameters:
        - name: start_date
          in: query
          description: "Start date (default: first day of the current month)"
          required: false
          schema:
            type: string
            format: date
            default: "2025-02-01"  # 実際には動的に設定する必要あり
        - name: end_date
          in: query
          description: "End date (default: last day of the current month)"
          required: false
          schema:
            type: string
            format: date
            default: "2025-02-28"  # 実際には動的に設定する必要あり
        - name: include_canceled
          in: query
          description: "Include canceled shifts (default: false)"
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "Successfully retrieved scheduled shifts"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: "Total number of scheduled shifts"
                  results:
                    type: array
                    description: "List of scheduled shifts sorted by start_time"
                    items:
                      type: object
                      properties:
                        start_time:
                          type: string
                          format: date-time
                        working_time:
                          type: integer
                          description: "Total working time in minutes"
                        breaking_time:
                          type: integer
                          description: "Total break time in minutes"
                        canceled_at:
                          type: string
                          nullable: true
                          format: date-time
                        updated_by:
                          type: integer
                        user_id:
                          type: integer
                        username:
                          type: string
                        preferred_shift_id:
                          type: integer
        "400":
          description: "invalid query parameter."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid query parameter."
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'

    post:
      summary: "Create a new scheduled shift"
      description: "New registration of scheduled shift. admin hits this api"
      tags:
        - Scheduled shifts resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scheduledShiftRequiredAll'
      responses:
        "201":
          description: "scheduled shift creation success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_time:
                    type: string
                    format: date-time
                  working_time:
                    type: integer
                    description: "Total working time in minutes"
                  breaking_time:
                    type: integer
                    description: "Total break time in minutes"
                  canceled_at:
                    type: string
                    nullable: true
                    format: date-time
                  updated_by:
                    type: integer
                  #TODO preferred_shift_idからuser_id取得できるけど必要？
                  user_id:
                    type: integer
                  preferred_shift_id:
                    type: integer
        "400":
          description: "Invalid request body"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid start_time format"
        "401":
          $ref: '#/components/responses/AdminOnlyResponse'

  /api/scheduled-shifts/{shiftId}:
    get:
      summary: "Retrieve details of a scheduled shift"
      description: "Fetch the details of a specific scheduled shift by its ID."
      tags:
        - Scheduled shifts resource
      parameters:
        - name: shiftId
          in: path
          required: true
          description: "Unique identifier of the scheduled shift"
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully retrieved scheduled shift details"
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_time:
                    type: string
                    format: date-time
                    description: "Start time of the shift"
                  working_time:
                    type: integer
                    description: "Total working time in minutes"
                  breaking_time:
                    type: integer
                    description: "Total break time in minutes"
                  canceled_at:
                    type: string
                    format: date-time
                    nullable: true
                    description: "Timestamp when the shift was canceled (null if not canceled)"
                  updated_by:
                    type: integer
                    description: "ID of the user who last updated the shift"
                  user_id:
                    type: integer
                    description: "ID of the user assigned to the shift"
                  username:
                    type: string
                  preferred_shift_id:
                    type: integer
                    description: "ID of the preferred shift associated with this scheduled shift"
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: "Shift not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Shift not found."

    patch:
      summary: "update with specified shift ID (some element)"
      description: |
        **Updatable items:**
        - `start_time`
        - `working_time`
        - `breaking_time`
        **Partial updates are possible. Only the items you include in the request body will be updated; other values will remain unchanged. **
      tags:
        - Scheduled shifts resource
      parameters:
        - name: shiftId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: "start_time, working_time, breaking_time of the shift you want to update"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scheduledShiftRequiredAll'
              additionalProperties: false
      responses:
        "200":
          description: "Successfully updated scheduled shift"
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_time:
                    type: string
                    format: date-time
                  working_time:
                    type: integer
                    description: "Total working time in minutes"
                  breaking_time:
                    type: integer
                    description: "Total break time in minutes"
                  canceled_at:
                    type: string
                    nullable: true
                    format: date-time
                  updated_by:
                    type: integer
                  user_id:
                    type: integer
                  preferred_shift_id:
                    type: integer
        "400":
          description: "Invalid request body"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid start_time format"
        "401":
          $ref: '#/components/responses/AdminOnlyResponse'

  /api/scheduled-shifts/{shiftId}/cancel:
    patch:
      summary: "Cancel a scheduled shift"
      description: "Cancel a scheduled shift by providing the cancellation reason."
      tags:
        - Scheduled shifts resource
      parameters:
        - name: shiftId
          in: path
          required: true
          description: "The ID of the shift to be canceled"
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully canceled the shift"
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_time:
                    type: string
                    format: date-time
                  working_time:
                    type: integer
                    description: "Total working time in minutes"
                  breaking_time:
                    type: integer
                    description: "Total break time in minutes"
                  canceled_at:
                    type: string
                    nullable: true
                    format: date-time
                  updated_by:
                    type: integer
                  user_id:
                    type: integer
                  preferred_shift_id:
                    type: integer
        "401":
          $ref: '#/components/responses/AdminOnlyResponse'
        "404":
          description: "Shift not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Shift not found."

  /api/scheduled-shifts/{userId}:
    get:
      summary: "Get scheduled shifts for a user within a specified date range (default: current month)"
      description: "Fetch the scheduled shifts for a specific user, with optional cancellation status filtering. By default, returns shifts for the current month."
      tags:
        - Scheduled shifts resource
      parameters:
        - name: userId
          in: path
          required: true
          description: "The ID of the user to retrieve scheduled shifts for"
          schema:
            type: integer
        - name: start_date
          in: query
          required: false
          description: "Start date for the shift range (inclusive), formatted as yyyy-MM-dd. Defaults to the first day of the current month."
          schema:
            type: string
            format: date
            default: "2025-02-01"  # 例: 現在の月の1日
        - name: end_date
          in: query
          required: false
          description: "End date for the shift range (inclusive), formatted as yyyy-MM-dd. Defaults to the last day of the current month."
          schema:
            type: string
            format: date
            default: "2025-02-28"  # 例: 現在の月の最終日
        - name: include_canceled
          in: query
          required: false
          description: "Whether to include canceled shifts in the response (default: false)"
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "Successfully retrieved scheduled shifts"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: "Total number of scheduled shifts"
                  results:
                    type: array
                    description: "List of scheduled shifts sorted by start_time"
                    items:
                      type: object
                      properties:
                        start_time:
                          type: string
                          format: date-time
                        working_time:
                          type: integer
                          description: "Total working time in minutes"
                        breaking_time:
                          type: integer
                          description: "Total break time in minutes"
                        canceled_at:
                          type: string
                          nullable: true
                          format: date-time
                        updated_by:
                          type: integer
                        user_id:
                          type: integer
                        username:
                          type: string
                        preferred_shift_id:
                          type: integer
        "400":
          description: "invalid query parameter."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid query parameter."
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/preferred-shifts:
    get:
      summary: "Retrieve preferred shifts within a specified date range"
      description: "Fetch the preferred shifts that fall within the given start and end dates. If no date range is provided, the default range is the current month."
      tags:
        - Preferred shifts resource
      parameters:
        - name: start_date
          in: query
          required: false
          description: "Start date for the shift range (inclusive), formatted as yyyy-MM-dd. Defaults to the first day of the current month."
          schema:
            type: string
            format: date
            default: "2025-02-01"  # 例: 現在の月の1日
        - name: end_date
          in: query
          required: false
          description: "End date for the shift range (inclusive), formatted as yyyy-MM-dd. Defaults to the last day of the current month."
          schema:
            type: string
            format: date
            default: "2025-02-28"  # 例: 現在の月の最終日
      responses:
        "200":
          description: "Successfully obtained preferred shift"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: "Total number of preferred shifts found"
                  results:
                    type: array
                    description: "List of preferred shifts"
                    items:
                      type: object
                      properties:
                        start_time:
                          type: string
                          format: date-time
                          description: "Start time of the preferred shift"
                        end_time:
                          type: string
                          format: date-time
                          description: "End time of the preferred shift"
                        user_id:
                          type: integer
                          description: "ID of the user associated with the shift"
                        username:
                          type: string
                          description: "Name of the user associated with the shift"
    post:
      summary: "Create new preferred shift"
      description: "New registration of preferred shift"
      tags:
        - Preferred shifts resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preferredShiftRequiredAll'
      responses:
        "201":
          description: "preferred shift creation success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_time:
                    type: string
                    format: date-time
                    description: "Start time of the preferred shift"
                  end_time:
                    type: string
                    format: date-time
                    description: "End time of the preferred shift"
                  user_id:
                    type: integer
                    description: "ID of the user associated with the shift"
        "400":
          description: "Invalid request body"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid start_time format"
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/preferred-shifts/{shiftId}:
    get:
      summary: "Get preferred shift with specified shift ID"
      description: "Gets the preferred shift based on the specified shift ID"
      tags:
        - Preferred shifts resource
      parameters:
        - name: shiftId
          in: path
          description: "preferred shift unique ID"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully obtained preferred shift"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferredShift'
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: "Shift not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Shift not found."
    patch:
      summary: "update with specified shift ID (some element)"
      description: |
        Updates the specified shift information.  
        Only the properties included in the request body will be updated; unspecified properties will not be changed.
      tags:
        - Preferred shifts resource
      parameters:
        - name: shiftId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: |
          **Updatable items:**
          - `start_time`
          - `end_time`
          **Partial updates are possible. Only the items you include in the request body will be updated; other values will remain unchanged. **
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preferredShift'
              additionalProperties: false
      responses:
        "200":
          description: "Successfully updated preferred shift"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferredShift'
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: "Shift not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Shift not found."

    delete:
      summary: "Delete shift with specified shift ID"
      description: "Deletes a shift based on the specified shift ID"
      tags:
        - Preferred shifts resource
      parameters:
        - name: shiftId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Successfully deleted shift"
          content: {}
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: "Shift not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Shift not found."

  /api/preferred-shifts/{userId}:
    get:
      summary: "Retrieve preferred shifts within a specified date range"
      description: "Fetch the preferred shifts that fall within the given start and end dates. If no date range is provided, the default range is the current month."
      tags:
        - Preferred shifts resource
      parameters:
        - name: userId
          in: path
          description: "user's unique ID"
          required: true
          schema:
            type: integer
        - name: start_date
          in: query
          required: false
          description: "Start date for the shift range (inclusive), formatted as yyyy-MM-dd. Defaults to the first day of the current month."
          schema:
            type: string
            format: date
            default: "2025-02-01"  # 例: 現在の月の1日
        - name: end_date
          in: query
          required: false
          description: "End date for the shift range (inclusive), formatted as yyyy-MM-dd. Defaults to the last day of the current month."
          schema:
            type: string
            format: date
            default: "2025-02-28"  # 例: 現在の月の最終日
            
      responses:
        "200":
          description: "Successfully obtained preferred shift"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: "Total number of preferred shifts found"
                  results:
                    type: array
                    description: "List of preferred shifts"
                    items:
                      type: object
                      properties:
                        start_time:
                          type: string
                          format: date-time
                          description: "Start time of the preferred shift"
                        end_time:
                          type: string
                          format: date-time
                          description: "End time of the preferred shift"
                        user_id:
                          type: integer
                          description: "ID of the user associated with the shift"
        "400":
          description: "invalid query parameter."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid query parameter."
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/shift-histories:
    get:
      summary: "Retrieve shift histories within a specified date range"
      description: "Fetch the shift histories that fall within the given start and end dates. If no date range is provided, the default range is the current month."
      tags:
        - Shift history resource
      parameters:
        - name: start_date
          in: query
          description: "Start date (default: first day of the current month)"
          required: false
          schema:
            type: string
            format: date
            default: "2025-02-01"  # 実際には動的に設定する必要あり
        - name: end_date
          in: query
          description: "End date (default: last day of the current month)"
          required: false
          schema:
            type: string
            format: date
            default: "2025-02-28"  # 実際には動的に設定する必要あり
      responses:
        "200":
          description: "Successfully retrieved shift histories"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: "Total number of shift histories matching the query"
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        start_time:
                          type: string
                          format: date-time
                          description: "Shift start time"
                        end_time:
                          type: string
                          format: date-time
                          description: "Shift end time"
                        paid_at:
                          type: string
                          format: date-time
                          nullable: true
                          description: "Time when the shift was paid, or null if not yet paid"
                        user_id:
                          type: integer
                          description: "User ID associated with the shift"
                        username:
                          type: string
                          description: "Username of the shift worker"
        "400":
          description: "invalid query parameter."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid query parameter."
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'

    post:
      summary: "Register multiple shift history records from a CSV file"
      description: "Accepts a CSV file containing shift history records and registers all records if they are valid. If any record is invalid, no records will be registered."
      tags:
        - Shift history resource
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "CSV file containing shift history records"
      responses:
        "201":
          description: "Successfully created all shift history records"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_created:
                    type: integer
                    description: "Total number of records successfully created"
        "400":
          description: "Invalid file format or one or more records contain errors. No records were registered."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message explaining the issue"

  /api/shift-histories/{shiftHistoryId}:
    get:
      summary: "Get shift history with specified shift ID"
      description: "Get shift history based on the specified shift ID"
      tags:
        - Shift history resource
      parameters:
        - name: shiftHistoryId
          in: path
          description: "unique ID of shift history"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully retrieved shift history"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shiftHistory'
    patch:
      summary: "update with specified shift ID (some element)"
      description: |
        Updates the specified shift information.  
        Only the properties included in the request body will be updated; unspecified properties will not be changed.
      tags:
        - Shift history resource
      parameters:
        - name: shiftHistoryId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: |
          **Updatable items:**
          - `start_time`
          - `end_time`
          **Partial updates are possible. Only the items you include in the request body will be updated; other values ​​will remain unchanged. **
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shiftHistory'
              additionalProperties: false
      responses:
        200:
          description: User information updated successfully
    delete:
      summary: "Delete shift with specified shift ID"
      description: "Deletes a shift based on the specified shift ID"
      tags:
        - Shift history resource
      parameters:
        - name: shiftHistoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully deleted shift"

  /api/shift-histories/payments:
    put:
      summary: "Update the 'paid_at' field for multiple shift histories"
      description: "This endpoint allows updating the 'paid_at' field for a list of shift histories. Only the 'paid_at' field is updated, while other fields remain unchanged."
      tags:
        - Shift history resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shifts:
                  type: array
                  items:
                    type: integer
                    description: "The unique ID of the shift history to be updated"
      responses:
        "200":
          description: "Successfully updated the 'paid_at' field for the specified shift histories"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_updated:
                    type: integer
                    description: "Total number of shift histories successfully updated"
        "400":
          description: "Invalid data provided. The 'paid_at' field must be a valid datetime format."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message explaining the issue"
        "401":
          $ref: '#/components/responses/AdminOnlyResponse'
        "404":
          description: "One or more shift histories not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error message explaining the issue"

  /api/shift-histories/{userId}:
    get:
      summary: "Get shift histories for a user within a specified date range (default: current month)"
      description: "Fetch the shift histories for a specific user, with optional cancellation status filtering. By default, returns shifts for the current month."
      tags:
        - Shift history resource
      # TODO 期間に関係なくみたい？
      parameters:
        - name: userId
          in: path
          description: "user's unique ID"
          required: true
          schema:
            type: integer
        - name: start_date
          in: query
          description: "Start date (default: first day of the current month)"
          required: false
          schema:
            type: string
            format: date
            default: "2025-02-01"  # 実際には動的に設定する必要あり
        - name: end_date
          in: query
          description: "End date (default: last day of the current month)"
          required: false
          schema:
            type: string
            format: date
            default: "2025-02-28"  # 実際には動的に設定する必要あり
      responses:
        "200":
          description: "Successfully obtained shift histories"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: "Total number of shift histories found"
                  results:
                    type: array
                    description: "List of shift histories"
                    items:
                      type: object
                      properties:
                        start_time:
                          type: string
                          format: date-time
                          description: "Start time of the shift history"
                        end_time:
                          type: string
                          format: date-time
                          description: "End time of the shift history"
                        paid_at:
                          type: string
                          format: date-time
                        user_id:
                          type: integer
                          description: "ID of the user associated with the shift"
        "400":
          description: "invalid query parameter."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid query parameter."
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'

  /api/user-infos/{userInfoId}:
    get:
      summary: "Get user info with specified user info ID"
      description: "Get user info based on the specified user info ID"
      tags:
        - User infos resource
      parameters:
        - name: userInfoId
          in: path
          description: "user info unique ID"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully obtained user info"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfo'
    put:
      summary: "update (everything) with the specified user info ID"
      tags:
        - User infos resource
      parameters:
        - name: userInfoId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: "The user info you want to update name_ja, phone_number1, phone_number2, nfc_id, level, interview_date, contract_date, expire_date"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfoRequiredAll'
      responses:
        "200":
          description: "User info updated successfully"
    patch:
      summary: "update with specified user info ID (some element)"
      description: |
        Updates the specified user info information.  
        Only the properties included in the request body will be updated; unspecified properties will not be changed.
      tags:
        - User infos resource
      parameters:
        - name: userInfoId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: |
          **Updatable items:**
          - `name_ja`
          - `phone_number1`
          - `phone_number2`
          - `nfc_id`
          - `level`
          - `interview_date`
          - `contract_date`
          - `expire_date`
          **Partial updates are possible. Only the items you include in the request body will be updated; other values ​​will remain unchanged. **
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfo'
              additionalProperties: false
      responses:
        200:
          description: User information updated successfully
    delete:
      summary: "Delete user info with specified user info ID"
      description: "Deletes user info based on the specified user info ID"
      tags:
        - User infos resource
      parameters:
        - name: userInfoId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully deleted user info"

  /api/users/{userId}/user-infos:
    get:
      summary: "Get one user info with specified user ID"
      description: "Gets one user info based on the specified user ID"
      tags:
        - User infos resource
      parameters:
        - name: userId
          in: path
          description: "user's unique ID"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully obtained user info"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfo'
    put:
      summary: "update one user info based on the specified user ID (everything)"
      tags:
        - User infos resource
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: "The user info you want to update name_ja, phone_number1, phone_number2, nfc_id, level, interview_date, contract_date, expire_date"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfoRequiredAll'
      responses:
        "200":
          description: "User info updated successfully"
    patch:
      summary: "update user info for specified user ID (some element)"
      description: |
        Updates one user info information based on the specified user ID.  
        Only the properties included in the request body will be updated; unspecified properties will not be changed.
      tags:
        - User infos resource
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: |
          **Updatable items:**
          - `name_ja`
          - `phone_number1`
          - `phone_number2`
          - `nfc_id`
          - `level`
          - `interview_date`
          - `contract_date`
          - `expire_date`
          **Partial updates are possible. Only the items you include in the request body will be updated; other values ​​will remain unchanged. **
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfo'
              additionalProperties: false
      responses:
        200:
          description: User information updated successfully
    post:
      summary: "Create a new user info for the specified user ID"
      description: "New registration of user info for the specified user ID. admin hits this api"
      tags:
        - User infos resource
      parameters:
        - name: userId
          in: path
          description: "user's unique ID"
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInfoRequiredAll'
      responses:
        "200":
          description: "user info creation success"
    delete:
      summary: "Delete user info for specified user ID"
      description: "Deletes one user info based on the specified user ID"
      tags:
        - User infos resource
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully deleted user info"

  /login:
    get:
      tags:
        - Pages
      summary: Login page
      description: page to enter username and password
      responses:
        "200":
          description: File name:`login.html`
          content:
            text/html:
              schema:
                type: string
                example: |
                  <!DOCTYPE html>
                  <html>
                  <head><title>Example</title></head>
                  </html>
        "500":
          description: Server error page

  /admin/shifts:
    get:
      tags:
        - Admin role
      summary: admin shift management page
      description: A page where admins can manage, add and delete shifts.
      responses:
        "200":
          description: File name:`shifts.html`
          content:
            text/html:
              schema:
                type: string
                example: |
                  <!DOCTYPE html>
                  <html>
                  <head><title>Example</title></head>
                  </html>
        "400":
          description: Client error page
        "500":
          description: Server error page

  /admin/shifts/register:
    get:
      tags:
        - Admin role
      summary: Shift addition page
      description: Page to add shifts
      responses:
        "200":
          description: File name:`shift-register.html`
          content:
            text/html:
              schema:
                type: string
                example: |
                  <!doctype html>
                  <html>
                  <head><title>example</title></head>
                  </html>
        "400":
          description: Client error page
        "500":
          description: Server error page

  /admin/shifts/histories:
    get:
      tags:
        - Admin role
      summary: Attendance history management page
      description: Page to display attendance history and output csv
      responses:
        "200":
          description: File name:`admin/shift-histories.html`
          content:
            text/html:
              schema:
                type: string
                example: |
                  <!DOCTYPE html>
                  <html>
                  <head><title>Example</title></head>
                  </html>
        "400":
          description: Client error page
        "500":
          description: Server error page

  /admin/users:
    get:
      tags:
        - Admin role
      summary: User management page
      description: Page to view and edit user list
      responses:
        "200":
          description: File name:`admin/user.html`
          content:
            text/html:
              schema:
                type: string
                example: |
                  <!DOCTYPE html>
                  <html>
                  <head><title>Example</title></head>
                  </html>
        "400":
          description: Client error page
        "500":
          description: Server error page

  /admin/users/update:
    get:
      tags:
        - Admin role
      summary: admin user management page
      description: Page where admin can view and edit user list
      responses:
        "200":
          description: File name:`admin.html`
          content:
            text/html:
              schema:
                type: string
                example: |
                  <!DOCTYPE html>
                  <html>
                  <head><title>Example</title></head>
                  </html>
        "400":
          description: Client error page
        "500":
          description: Server error page

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UnauthorizedError:
      type: object
      properties:
        error:
          type: string
          description: "Authentication error details"
          example: "Token is invalid or expired."

    AdminOnlyError:
      type: object
      properties:
        error:
          type: string
          description: "Admin privileges are required to access this resource."
          example: "Forbidden - Admin privileges required."

    UnauthorizedOrAdminResponseError:
      type: object
      properties:
        error:
          type: string
          description: "Authentication or authorization error details"
          example: "Unauthorized - Missing or invalid token, or admin privileges required."

    scheduledShiftRequiredAll:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        working_time:
          type: integer
        breaking_time:
          type: integer
        preferred_shift_id:
          type: integer
      required:
        - start_time
        - working_time
        - breaking_time
        - preferred_shift_id

    scheduledShift:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        working_time:
          type: integer
        breaking_time:
          type: integer

    preferredShiftRequiredAll:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        user_id:
          type: integer
      required:
        - start_time
        - end_time
        - user_id

    preferredShift:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time

    shiftHistoryRequiredAll:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
      required:
        - start_time
        - end_time

    shiftHistory:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        paid_at:
          type: string
          format: date-time
        user_id:
          type: integer

    userInfoRequiredAll:
      type: object
      properties:
        name_ja:
          type: string
        phone_number1:
          type: integer
        phone_number2:
          type: integer
        nfc_id:
          type: integer
        level:
          type: number
        interview_date:
          type: string
          format: date
        contract_date:
          type: string
          format: date
        expire_date:
          type: string
          format: date
        birthday_date:
          type: string
          format: date
      required:
        - name_ja
        - phone_number1
        - phone_number2
        - nfc_id
        - level
        - interview_date
        - contract_date
        - expire_date
        - birthday_date

    userInfo:
      type: object
      properties:
        name_ja:
          type: string
        phone_number1:
          type: integer
        phone_number2:
          type: integer
        nfc_id:
          type: integer
        level:
          type: number
        interview_date:
          type: string
          format: date
        contract_date:
          type: string
          format: date
        expire_date:
          type: string
          format: date
        birthday_date:
          type: string
          format: date

  responses:
    UnauthorizedResponse:
      description: "Unauthorized - Missing or invalid token."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'

    AdminOnlyResponse:
      description: "Forbidden - Admin privileges required."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminOnlyError'

    UnauthorizedOrAdminResponse:
      description: "Forbidden - The user is either unauthorized or lacks admin privileges."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedOrAdminResponseError'
